/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

define(['jquery', 'oae.core'], function($, oae) {

    return function(uid, showSettings, widgetData) {

    	// The widget container
        var $rootel = $('#' + uid);

        /**
         * Render the meeting description
         */
        var renderMeeting = function(meeting) {
            var html_meeting_refresh = '<button class="btn btn-link meeting-trigger-managemeeting-refresh" title="' + oae.api.i18n.translate('__MSG__REFRESH_MEETING__', 'meeting') + '"><i class="fa fa-refresh pull-left"></i></button>';
            $('#meeting-refresh', $rootel).html(html_meeting_refresh);
            $('#meeting-description', $rootel).html(oae.api.util.security().encodeForHTMLWithLinks(meeting.description));

            oae.api.meeting.infoMeeting(meeting.id, function(err, info) {
                var meeting_status;
                if (!err) {
                    if ( meeting.canJoin ) {
                        ////The status should be shown based on the meetingInfo, the permissions for the user and the configuration of the meeting
                        meeting_status = '<div class="alert alert-info" role="alert">';
                        if ( info.returncode === 'SUCCESS' ) {
                            meeting_status += oae.api.i18n.translate('__MSG__ALERT_MEETING_STARTED__', 'meeting');
                            meeting_status += ' ' + oae.api.i18n.translate('__MSG__ALERT_MEETING_USERCANJOIN__', 'meeting');
                        } else {
                            if ( meeting.isManager || meeting.waitModerator == 'false' ) {
                                meeting_status += oae.api.i18n.translate('__MSG__ALERT_MEETING_ROOM_READY__', 'meeting');
                                meeting_status += ' ' + oae.api.i18n.translate('__MSG__ALERT_MEETING_USERCANJOIN__', 'meeting');
                            } else {
                                meeting_status += oae.api.i18n.translate('__MSG__ALERT_MEETING_ROOM_CLOSED__', 'meeting');
                                meeting_status += ' ' + oae.api.i18n.translate('__MSG__ALERT_MEETING_USERMUSTWAIT__', 'meeting');
                            }
                        }
                        meeting_status += '</div>';

                        ////The join button should be shown based on the meetingInfo, the permissions for the user and the configuration of the meeting
                        if ( meeting.isManager || info.returncode === 'SUCCESS' || meeting.waitModerator == 'false' ) {
                            var html_meeting_actionbar_join = '<button class="meeting-trigger-managemeeting-join"><i class="fa fa-external-link pull-left oae-hide-when-anonymous"></i>' + oae.api.i18n.translate('__MSG__JOIN_MEETING__', 'meeting') + '</button>';
                            $('#meeting-actionbar-join', $rootel).html(html_meeting_actionbar_join);
                        }

                        ////The end button should be shown based on the meetingInfo, the permissions for the user
                        var html_meeting_actionbar_end = '';
                        if ( info.returncode === 'SUCCESS' && meeting.isManager ) {
                            html_meeting_actionbar_end = '<button class="meeting-trigger-managemeeting-end"><i class="fa fa-minus-square pull-left oae-hide-when-anonymous"></i>' + oae.api.i18n.translate('__MSG__END_MEETING__', 'meeting') + '</button>';
                        }
                        $('#meeting-actionbar-end', $rootel).html(html_meeting_actionbar_end);

                        ////Recordings should be shown if any
                        oae.api.meeting.getRecording(meeting.id, function(err, info) {
                            if ( !err  && info.returncode == 'SUCCESS' && info.recordings.length > 0) {
                                var t_headers = ["Id", "Name", "Started", "Ended"];
                                if ( meeting.isManager ) {
                                    t_headers.push("Toolbar");
                                }
                                var meeting_recordings = $('<div><h3>Recordings 0.1</h3><br></div>');
                                var meeting_recordings_table = $('<table id="meeting-recordings-table" class="table table-striped table-bordered"></table>');

                                ///render thead into table
                                var meeting_recordings_table_thead = $('<thead></thead>');
                                var meeting_recordings_table_thead_tr = $('<tr></tr>');

                                for (var i=0; i<t_headers.length; i++) {
                                    meeting_recordings_table_thead_tr.append($('<th>'+t_headers[i]+'</th>'));
                                }
                                meeting_recordings_table_thead.append(meeting_recordings_table_thead_tr);
                                meeting_recordings_table.append(meeting_recordings_table_thead);

                                ///render tbody into table
                                var meeting_recordings_table_tbody = $('<tbody></tbody>');
                                for (var i=0; i<info.recordings.length; i++ ) {
                                    var meeting_recordings_table_tbody_tr = $('<tr id="recording_' + info.recordings[i].recordID + '" data-id="' + info.recordings[i].recordID + '"></tr>');
                                    var playback_links = '';
                                    var playbacks = [];
                                    if (Array.isArray(info.recordings[i].playback.format)) {
                                      playbacks = info.recordings[i].playback.format;
                                    } else {
                                      playbacks.push(info.recordings[i].playback.format);
                                    }
                                    playbacks.forEach(function(element, index, array) {
                                      playback_links += ('<a target="_blank" href="' + element.url + '">' + element.type + '</a> ');
                                    });
                                    var html_meeting_recordings_table_tbody_tr = '<td>'+ i +'</td><td>' + info.recordings[i].name + '<br/>' + playback_links + '</td><td>'+ info.recordings[i].startTime +'</td><td>'+ info.recordings[i].endTime +'</td>';
                                    if ( meeting.isManager ) {
                                        var published = info.recordings[i].published;
                                        var publish_name = published == 'true' ? 'unpublish' : 'publish'
                                        html_meeting_recordings_table_tbody_tr += '<td><button class="publish-recording" data-published="' + published + '">' + publish_name + '</button>';
                                        html_meeting_recordings_table_tbody_tr += '<button class="delete-recording">delete</button></td>';
                                    }
                                    meeting_recordings_table_tbody_tr.html(html_meeting_recordings_table_tbody_tr);
                                    meeting_recordings_table_tbody.append(meeting_recordings_table_tbody_tr);
                                }
                                meeting_recordings_table.append(meeting_recordings_table_tbody);

                                ///render table
                                meeting_recordings.append(meeting_recordings_table);
                                $('#meeting-recordings', $rootel).append(meeting_recordings);

                                //add bindings for recordings toolbar
                                $('#meeting-recordings').on('click', '.publish-recording', function() {
                                    var button = this;
                                    var id = $(this).parents('tr:first').data('id');
                                    var publish = $(this).data('published');
                                    oae.api.meeting.updateRecording(id, publish, function(err, info) {
                                      if(!err) {
                                        $(button).data('published', !publish);
                                        $(button).html(publish ? 'publish' : 'unpublish');
                                      }
                                    });
                                });

                                $('#meeting-recordings').on('click', '.delete-recording', function() {
                                    var button = this;
                                    var id = $(this).parents('tr:first').data('id');
                                    oae.api.meeting.deleteRecording(id, function(err, info) {
                                      if(!err) {
                                        $('#recording_' + id).remove();
                                      }
                                    });
                                });
                            }
                        });

                    } else {
                        meeting_status = '<div class="alert alert-warning" role="alert">' + oae.api.i18n.translate('__MSG__ALERT_MEETING_USERCANNOTJOIN__', 'meeting') + '</div>';
                    }

                } else {
                    // Show an error message
                    meeting_status = '<div class="alert alert-danger" role="alert">' + oae.api.i18n.translate('__MSG__ALERT_MEETING_ERROR__', 'meeting') + '</div>';
                }

                $('#meeting-status', $rootel).html(meeting_status);

            });
        };

        /**
         * Initialize the meeting description and add a binding for description updates
         */
        var initMeeting = function() {
            if (widgetData) {
                renderMeeting(widgetData);
            }

            $(document).on('oae.editmeeting.done', function(ev, data) {
                renderMeeting(data);
            });

            $(document).on('oae.trigger.managemeeting-refresh', function(ev, data) {
                console.info('Executing the refresh');
                renderMeeting(data);
            });
        };

        initMeeting();
        console.info('meeting shown');
    };
});
